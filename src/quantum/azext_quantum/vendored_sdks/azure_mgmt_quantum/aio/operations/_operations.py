# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, AsyncIterable, Callable, Dict, IO, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.async_arm_polling import AsyncARMPolling

from ...operations._operations import (
    build_offerings_list_request,
    build_operations_list_request,
    build_workspace_check_name_availability_request,
    build_workspace_list_keys_request,
    build_workspace_regenerate_keys_request,
    build_workspaces_create_or_update_request,
    build_workspaces_delete_request,
    build_workspaces_get_request,
    build_workspaces_list_by_resource_group_request,
    build_workspaces_list_by_subscription_request,
    build_workspaces_update_tags_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class WorkspacesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.quantum.aio.AzureQuantumManagementClient`'s
        :attr:`workspaces` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def get(self, resource_group_name: str, workspace_name: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Returns the Workspace resource associated with the given name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the quantum workspace resource. Required.
        :type workspace_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "str"  # Optional. The identity type. Known values are:
                          "SystemAssigned" and "None".
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiKeyEnabled": bool,  # Optional. Indicator of enablement of the
                          Quantum workspace Api keys.
                        "endpointUri": "str",  # Optional. The URI of the workspace endpoint.
                        "providers": [
                            {
                                "applicationName": "str",  # Optional. The provider's
                                  marketplace application display name.
                                "instanceUri": "str",  # Optional. A Uri identifying
                                  the specific instance of this provider.
                                "providerId": "str",  # Optional. Unique id of this
                                  provider.
                                "providerSku": "str",  # Optional. The sku associated
                                  with pricing information for this provider.
                                "provisioningState": "str",  # Optional. Provisioning
                                  status field. Known values are: "Succeeded", "Launching", "Updating",
                                  "Deleting", "Deleted", and "Failed".
                                "resourceUsageId": "str"  # Optional. Id to track
                                  resource usage for the provider.
                            }
                        ],
                        "provisioningState": "str",  # Optional. Provisioning status field.
                          Known values are: "Succeeded", "ProviderLaunching", "ProviderUpdating",
                          "ProviderDeleting", "ProviderProvisioning", and "Failed".
                        "storageAccount": "str",  # Optional. ARM Resource Id of the storage
                          account associated with this workspace.
                        "usable": "str"  # Optional. Whether the current workspace is ready
                          to accept Jobs. Known values are: "Yes", "No", and "Partial".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_workspaces_get_request(
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    async def _create_or_update_initial(
        self, resource_group_name: str, workspace_name: str, quantum_workspace: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(quantum_workspace, (IOBase, bytes)):
            _content = quantum_workspace
        else:
            _json = quantum_workspace

        _request = build_workspaces_create_or_update_request(
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def begin_create_or_update(
        self,
        resource_group_name: str,
        workspace_name: str,
        quantum_workspace: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[JSON]:
        # pylint: disable=line-too-long
        """Creates or updates a workspace resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the quantum workspace resource. Required.
        :type workspace_name: str
        :param quantum_workspace: Workspace details. Required.
        :type quantum_workspace: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns JSON object
        :rtype: ~azure.core.polling.AsyncLROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                quantum_workspace = {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "str"  # Optional. The identity type. Known values are:
                          "SystemAssigned" and "None".
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiKeyEnabled": bool,  # Optional. Indicator of enablement of the
                          Quantum workspace Api keys.
                        "endpointUri": "str",  # Optional. The URI of the workspace endpoint.
                        "providers": [
                            {
                                "applicationName": "str",  # Optional. The provider's
                                  marketplace application display name.
                                "instanceUri": "str",  # Optional. A Uri identifying
                                  the specific instance of this provider.
                                "providerId": "str",  # Optional. Unique id of this
                                  provider.
                                "providerSku": "str",  # Optional. The sku associated
                                  with pricing information for this provider.
                                "provisioningState": "str",  # Optional. Provisioning
                                  status field. Known values are: "Succeeded", "Launching", "Updating",
                                  "Deleting", "Deleted", and "Failed".
                                "resourceUsageId": "str"  # Optional. Id to track
                                  resource usage for the provider.
                            }
                        ],
                        "provisioningState": "str",  # Optional. Provisioning status field.
                          Known values are: "Succeeded", "ProviderLaunching", "ProviderUpdating",
                          "ProviderDeleting", "ProviderProvisioning", and "Failed".
                        "storageAccount": "str",  # Optional. ARM Resource Id of the storage
                          account associated with this workspace.
                        "usable": "str"  # Optional. Whether the current workspace is ready
                          to accept Jobs. Known values are: "Yes", "No", and "Partial".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "str"  # Optional. The identity type. Known values are:
                          "SystemAssigned" and "None".
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiKeyEnabled": bool,  # Optional. Indicator of enablement of the
                          Quantum workspace Api keys.
                        "endpointUri": "str",  # Optional. The URI of the workspace endpoint.
                        "providers": [
                            {
                                "applicationName": "str",  # Optional. The provider's
                                  marketplace application display name.
                                "instanceUri": "str",  # Optional. A Uri identifying
                                  the specific instance of this provider.
                                "providerId": "str",  # Optional. Unique id of this
                                  provider.
                                "providerSku": "str",  # Optional. The sku associated
                                  with pricing information for this provider.
                                "provisioningState": "str",  # Optional. Provisioning
                                  status field. Known values are: "Succeeded", "Launching", "Updating",
                                  "Deleting", "Deleted", and "Failed".
                                "resourceUsageId": "str"  # Optional. Id to track
                                  resource usage for the provider.
                            }
                        ],
                        "provisioningState": "str",  # Optional. Provisioning status field.
                          Known values are: "Succeeded", "ProviderLaunching", "ProviderUpdating",
                          "ProviderDeleting", "ProviderProvisioning", and "Failed".
                        "storageAccount": "str",  # Optional. ARM Resource Id of the storage
                          account associated with this workspace.
                        "usable": "str"  # Optional. Whether the current workspace is ready
                          to accept Jobs. Known values are: "Yes", "No", and "Partial".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    async def begin_create_or_update(
        self,
        resource_group_name: str,
        workspace_name: str,
        quantum_workspace: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[JSON]:
        # pylint: disable=line-too-long
        """Creates or updates a workspace resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the quantum workspace resource. Required.
        :type workspace_name: str
        :param quantum_workspace: Workspace details. Required.
        :type quantum_workspace: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns JSON object
        :rtype: ~azure.core.polling.AsyncLROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "str"  # Optional. The identity type. Known values are:
                          "SystemAssigned" and "None".
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiKeyEnabled": bool,  # Optional. Indicator of enablement of the
                          Quantum workspace Api keys.
                        "endpointUri": "str",  # Optional. The URI of the workspace endpoint.
                        "providers": [
                            {
                                "applicationName": "str",  # Optional. The provider's
                                  marketplace application display name.
                                "instanceUri": "str",  # Optional. A Uri identifying
                                  the specific instance of this provider.
                                "providerId": "str",  # Optional. Unique id of this
                                  provider.
                                "providerSku": "str",  # Optional. The sku associated
                                  with pricing information for this provider.
                                "provisioningState": "str",  # Optional. Provisioning
                                  status field. Known values are: "Succeeded", "Launching", "Updating",
                                  "Deleting", "Deleted", and "Failed".
                                "resourceUsageId": "str"  # Optional. Id to track
                                  resource usage for the provider.
                            }
                        ],
                        "provisioningState": "str",  # Optional. Provisioning status field.
                          Known values are: "Succeeded", "ProviderLaunching", "ProviderUpdating",
                          "ProviderDeleting", "ProviderProvisioning", and "Failed".
                        "storageAccount": "str",  # Optional. ARM Resource Id of the storage
                          account associated with this workspace.
                        "usable": "str"  # Optional. Whether the current workspace is ready
                          to accept Jobs. Known values are: "Yes", "No", and "Partial".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace_async
    async def begin_create_or_update(
        self, resource_group_name: str, workspace_name: str, quantum_workspace: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> AsyncLROPoller[JSON]:
        # pylint: disable=line-too-long
        """Creates or updates a workspace resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the quantum workspace resource. Required.
        :type workspace_name: str
        :param quantum_workspace: Workspace details. Is either a JSON type or a IO[bytes] type.
         Required.
        :type quantum_workspace: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns JSON object
        :rtype: ~azure.core.polling.AsyncLROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                quantum_workspace = {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "str"  # Optional. The identity type. Known values are:
                          "SystemAssigned" and "None".
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiKeyEnabled": bool,  # Optional. Indicator of enablement of the
                          Quantum workspace Api keys.
                        "endpointUri": "str",  # Optional. The URI of the workspace endpoint.
                        "providers": [
                            {
                                "applicationName": "str",  # Optional. The provider's
                                  marketplace application display name.
                                "instanceUri": "str",  # Optional. A Uri identifying
                                  the specific instance of this provider.
                                "providerId": "str",  # Optional. Unique id of this
                                  provider.
                                "providerSku": "str",  # Optional. The sku associated
                                  with pricing information for this provider.
                                "provisioningState": "str",  # Optional. Provisioning
                                  status field. Known values are: "Succeeded", "Launching", "Updating",
                                  "Deleting", "Deleted", and "Failed".
                                "resourceUsageId": "str"  # Optional. Id to track
                                  resource usage for the provider.
                            }
                        ],
                        "provisioningState": "str",  # Optional. Provisioning status field.
                          Known values are: "Succeeded", "ProviderLaunching", "ProviderUpdating",
                          "ProviderDeleting", "ProviderProvisioning", and "Failed".
                        "storageAccount": "str",  # Optional. ARM Resource Id of the storage
                          account associated with this workspace.
                        "usable": "str"  # Optional. Whether the current workspace is ready
                          to accept Jobs. Known values are: "Yes", "No", and "Partial".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "str"  # Optional. The identity type. Known values are:
                          "SystemAssigned" and "None".
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiKeyEnabled": bool,  # Optional. Indicator of enablement of the
                          Quantum workspace Api keys.
                        "endpointUri": "str",  # Optional. The URI of the workspace endpoint.
                        "providers": [
                            {
                                "applicationName": "str",  # Optional. The provider's
                                  marketplace application display name.
                                "instanceUri": "str",  # Optional. A Uri identifying
                                  the specific instance of this provider.
                                "providerId": "str",  # Optional. Unique id of this
                                  provider.
                                "providerSku": "str",  # Optional. The sku associated
                                  with pricing information for this provider.
                                "provisioningState": "str",  # Optional. Provisioning
                                  status field. Known values are: "Succeeded", "Launching", "Updating",
                                  "Deleting", "Deleted", and "Failed".
                                "resourceUsageId": "str"  # Optional. Id to track
                                  resource usage for the provider.
                            }
                        ],
                        "provisioningState": "str",  # Optional. Provisioning status field.
                          Known values are: "Succeeded", "ProviderLaunching", "ProviderUpdating",
                          "ProviderDeleting", "ProviderProvisioning", and "Failed".
                        "storageAccount": "str",  # Optional. ARM Resource Id of the storage
                          account associated with this workspace.
                        "usable": "str"  # Optional. Whether the current workspace is ready
                          to accept Jobs. Known values are: "Yes", "No", and "Partial".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, AsyncPollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = await self._create_or_update_initial(
                resource_group_name=resource_group_name,
                workspace_name=workspace_name,
                quantum_workspace=quantum_workspace,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: AsyncPollingMethod = cast(
                AsyncPollingMethod,
                AsyncARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs),
            )
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller[JSON].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller[JSON](self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @overload
    async def update_tags(
        self,
        resource_group_name: str,
        workspace_name: str,
        workspace_tags: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Updates an existing workspace's tags.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the quantum workspace resource. Required.
        :type workspace_name: str
        :param workspace_tags: Parameters supplied to update tags. Required.
        :type workspace_tags: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                workspace_tags = {
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "str"  # Optional. The identity type. Known values are:
                          "SystemAssigned" and "None".
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiKeyEnabled": bool,  # Optional. Indicator of enablement of the
                          Quantum workspace Api keys.
                        "endpointUri": "str",  # Optional. The URI of the workspace endpoint.
                        "providers": [
                            {
                                "applicationName": "str",  # Optional. The provider's
                                  marketplace application display name.
                                "instanceUri": "str",  # Optional. A Uri identifying
                                  the specific instance of this provider.
                                "providerId": "str",  # Optional. Unique id of this
                                  provider.
                                "providerSku": "str",  # Optional. The sku associated
                                  with pricing information for this provider.
                                "provisioningState": "str",  # Optional. Provisioning
                                  status field. Known values are: "Succeeded", "Launching", "Updating",
                                  "Deleting", "Deleted", and "Failed".
                                "resourceUsageId": "str"  # Optional. Id to track
                                  resource usage for the provider.
                            }
                        ],
                        "provisioningState": "str",  # Optional. Provisioning status field.
                          Known values are: "Succeeded", "ProviderLaunching", "ProviderUpdating",
                          "ProviderDeleting", "ProviderProvisioning", and "Failed".
                        "storageAccount": "str",  # Optional. ARM Resource Id of the storage
                          account associated with this workspace.
                        "usable": "str"  # Optional. Whether the current workspace is ready
                          to accept Jobs. Known values are: "Yes", "No", and "Partial".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    async def update_tags(
        self,
        resource_group_name: str,
        workspace_name: str,
        workspace_tags: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Updates an existing workspace's tags.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the quantum workspace resource. Required.
        :type workspace_name: str
        :param workspace_tags: Parameters supplied to update tags. Required.
        :type workspace_tags: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "str"  # Optional. The identity type. Known values are:
                          "SystemAssigned" and "None".
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiKeyEnabled": bool,  # Optional. Indicator of enablement of the
                          Quantum workspace Api keys.
                        "endpointUri": "str",  # Optional. The URI of the workspace endpoint.
                        "providers": [
                            {
                                "applicationName": "str",  # Optional. The provider's
                                  marketplace application display name.
                                "instanceUri": "str",  # Optional. A Uri identifying
                                  the specific instance of this provider.
                                "providerId": "str",  # Optional. Unique id of this
                                  provider.
                                "providerSku": "str",  # Optional. The sku associated
                                  with pricing information for this provider.
                                "provisioningState": "str",  # Optional. Provisioning
                                  status field. Known values are: "Succeeded", "Launching", "Updating",
                                  "Deleting", "Deleted", and "Failed".
                                "resourceUsageId": "str"  # Optional. Id to track
                                  resource usage for the provider.
                            }
                        ],
                        "provisioningState": "str",  # Optional. Provisioning status field.
                          Known values are: "Succeeded", "ProviderLaunching", "ProviderUpdating",
                          "ProviderDeleting", "ProviderProvisioning", and "Failed".
                        "storageAccount": "str",  # Optional. ARM Resource Id of the storage
                          account associated with this workspace.
                        "usable": "str"  # Optional. Whether the current workspace is ready
                          to accept Jobs. Known values are: "Yes", "No", and "Partial".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace_async
    async def update_tags(
        self, resource_group_name: str, workspace_name: str, workspace_tags: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Updates an existing workspace's tags.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the quantum workspace resource. Required.
        :type workspace_name: str
        :param workspace_tags: Parameters supplied to update tags. Is either a JSON type or a IO[bytes]
         type. Required.
        :type workspace_tags: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                workspace_tags = {
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "str"  # Optional. The identity type. Known values are:
                          "SystemAssigned" and "None".
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiKeyEnabled": bool,  # Optional. Indicator of enablement of the
                          Quantum workspace Api keys.
                        "endpointUri": "str",  # Optional. The URI of the workspace endpoint.
                        "providers": [
                            {
                                "applicationName": "str",  # Optional. The provider's
                                  marketplace application display name.
                                "instanceUri": "str",  # Optional. A Uri identifying
                                  the specific instance of this provider.
                                "providerId": "str",  # Optional. Unique id of this
                                  provider.
                                "providerSku": "str",  # Optional. The sku associated
                                  with pricing information for this provider.
                                "provisioningState": "str",  # Optional. Provisioning
                                  status field. Known values are: "Succeeded", "Launching", "Updating",
                                  "Deleting", "Deleted", and "Failed".
                                "resourceUsageId": "str"  # Optional. Id to track
                                  resource usage for the provider.
                            }
                        ],
                        "provisioningState": "str",  # Optional. Provisioning status field.
                          Known values are: "Succeeded", "ProviderLaunching", "ProviderUpdating",
                          "ProviderDeleting", "ProviderProvisioning", and "Failed".
                        "storageAccount": "str",  # Optional. ARM Resource Id of the storage
                          account associated with this workspace.
                        "usable": "str"  # Optional. Whether the current workspace is ready
                          to accept Jobs. Known values are: "Yes", "No", and "Partial".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(workspace_tags, (IOBase, bytes)):
            _content = workspace_tags
        else:
            _json = workspace_tags

        _request = build_workspaces_update_tags_request(
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    async def _delete_initial(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, workspace_name: str, **kwargs: Any
    ) -> None:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_workspaces_delete_request(
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    async def begin_delete(self, resource_group_name: str, workspace_name: str, **kwargs: Any) -> AsyncLROPoller[None]:
        """Deletes a Workspace resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the quantum workspace resource. Required.
        :type workspace_name: str
        :return: An instance of AsyncLROPoller that returns None
        :rtype: ~azure.core.polling.AsyncLROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, AsyncPollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = await self._delete_initial(  # type: ignore
                resource_group_name=resource_group_name,
                workspace_name=workspace_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {})  # type: ignore

        if polling is True:
            polling_method: AsyncPollingMethod = cast(
                AsyncPollingMethod, AsyncARMPolling(lro_delay, lro_options={"final-state-via": "location"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller[None].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller[None](self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @distributed_trace
    def list_by_subscription(self, **kwargs: Any) -> AsyncIterable[JSON]:
        # pylint: disable=line-too-long
        """Gets the list of Workspaces within a Subscription.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "str"  # Optional. The identity type. Known values are:
                          "SystemAssigned" and "None".
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiKeyEnabled": bool,  # Optional. Indicator of enablement of the
                          Quantum workspace Api keys.
                        "endpointUri": "str",  # Optional. The URI of the workspace endpoint.
                        "providers": [
                            {
                                "applicationName": "str",  # Optional. The provider's
                                  marketplace application display name.
                                "instanceUri": "str",  # Optional. A Uri identifying
                                  the specific instance of this provider.
                                "providerId": "str",  # Optional. Unique id of this
                                  provider.
                                "providerSku": "str",  # Optional. The sku associated
                                  with pricing information for this provider.
                                "provisioningState": "str",  # Optional. Provisioning
                                  status field. Known values are: "Succeeded", "Launching", "Updating",
                                  "Deleting", "Deleted", and "Failed".
                                "resourceUsageId": "str"  # Optional. Id to track
                                  resource usage for the provider.
                            }
                        ],
                        "provisioningState": "str",  # Optional. Provisioning status field.
                          Known values are: "Succeeded", "ProviderLaunching", "ProviderUpdating",
                          "ProviderDeleting", "ProviderProvisioning", and "Failed".
                        "storageAccount": "str",  # Optional. ARM Resource Id of the storage
                          account associated with this workspace.
                        "usable": "str"  # Optional. Whether the current workspace is ready
                          to accept Jobs. Known values are: "Yes", "No", and "Partial".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_workspaces_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_resource_group(self, resource_group_name: str, **kwargs: Any) -> AsyncIterable[JSON]:
        # pylint: disable=line-too-long
        """Gets the list of Workspaces within a resource group.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "str"  # Optional. The identity type. Known values are:
                          "SystemAssigned" and "None".
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiKeyEnabled": bool,  # Optional. Indicator of enablement of the
                          Quantum workspace Api keys.
                        "endpointUri": "str",  # Optional. The URI of the workspace endpoint.
                        "providers": [
                            {
                                "applicationName": "str",  # Optional. The provider's
                                  marketplace application display name.
                                "instanceUri": "str",  # Optional. A Uri identifying
                                  the specific instance of this provider.
                                "providerId": "str",  # Optional. Unique id of this
                                  provider.
                                "providerSku": "str",  # Optional. The sku associated
                                  with pricing information for this provider.
                                "provisioningState": "str",  # Optional. Provisioning
                                  status field. Known values are: "Succeeded", "Launching", "Updating",
                                  "Deleting", "Deleted", and "Failed".
                                "resourceUsageId": "str"  # Optional. Id to track
                                  resource usage for the provider.
                            }
                        ],
                        "provisioningState": "str",  # Optional. Provisioning status field.
                          Known values are: "Succeeded", "ProviderLaunching", "ProviderUpdating",
                          "ProviderDeleting", "ProviderProvisioning", and "Failed".
                        "storageAccount": "str",  # Optional. ARM Resource Id of the storage
                          account associated with this workspace.
                        "usable": "str"  # Optional. Whether the current workspace is ready
                          to accept Jobs. Known values are: "Yes", "No", and "Partial".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_workspaces_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)


class OfferingsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.quantum.aio.AzureQuantumManagementClient`'s
        :attr:`offerings` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, location_name: str, **kwargs: Any) -> AsyncIterable[JSON]:
        # pylint: disable=line-too-long
        """Returns the list of all provider offerings available for the given location.

        :param location_name: Location. Required.
        :type location_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. Unique provider's id.
                    "name": "str",  # Optional. Provider's display name.
                    "properties": {
                        "aad": {
                            "applicationId": "str",  # Optional. Provider's application
                              id.
                            "tenantId": "str"  # Optional. Provider's tenant id.
                        },
                        "company": "str",  # Optional. Company name.
                        "defaultEndpoint": "str",  # Optional. Provider's default endpoint.
                        "description": "str",  # Optional. A description about this provider.
                        "managedApplication": {
                            "offerId": "str",  # Optional. Provider's offer id.
                            "publisherId": "str"  # Optional. Provider's publisher id.
                        },
                        "pricingDimensions": [
                            {
                                "id": "str",  # Optional. Unique id of this pricing
                                  dimension.
                                "name": "str"  # Optional. The display name of this
                                  pricing dimension.
                            }
                        ],
                        "providerType": "str",  # Optional. Provider type.
                        "quotaDimensions": [
                            {
                                "description": "str",  # Optional. A description
                                  about this quota dimension.
                                "id": "str",  # Optional. Unique id of this
                                  dimension.
                                "name": "str",  # Optional. The display name of this
                                  quota dimension.
                                "period": "str",  # Optional. The reset period of
                                  this quota dimension.
                                "quota": 0.0,  # Optional. The max limit of this
                                  dimension.
                                "scope": "str",  # Optional. The scope of this quota
                                  dimension.
                                "unit": "str",  # Optional. The standard unit of
                                  measurement used for this quota dimension.
                                "unitPlural": "str"  # Optional. The standard unit of
                                  measurement used for this quota dimension in plural form.
                            }
                        ],
                        "skus": [
                            {
                                "autoAdd": bool,  # Optional. Flag to indicate
                                  whether the sku should be automatically added during workspace
                                  creation.
                                "description": "str",  # Optional. Description about
                                  this sku.
                                "id": "str",  # Optional. Unique sku id.
                                "name": "str",  # Optional. Display name of this sku.
                                "pricingDetails": [
                                    {
                                        "id": "str",  # Optional. Unique id
                                          for this pricing information.
                                        "value": "str"  # Optional. The unit
                                          cost of this sku.
                                    }
                                ],
                                "quotaDimensions": [
                                    {
                                        "description": "str",  # Optional. A
                                          description about this quota dimension.
                                        "id": "str",  # Optional. Unique id
                                          of this dimension.
                                        "name": "str",  # Optional. The
                                          display name of this quota dimension.
                                        "period": "str",  # Optional. The
                                          reset period of this quota dimension.
                                        "quota": 0.0,  # Optional. The max
                                          limit of this dimension.
                                        "scope": "str",  # Optional. The
                                          scope of this quota dimension.
                                        "unit": "str",  # Optional. The
                                          standard unit of measurement used for this quota dimension.
                                        "unitPlural": "str"  # Optional. The
                                          standard unit of measurement used for this quota dimension in
                                          plural form.
                                    }
                                ],
                                "restrictedAccessUri": "str",  # Optional. Uri to
                                  subscribe to the restricted access sku.
                                "targets": [
                                    "str"  # Optional. The list of targets
                                      available for this sku.
                                ],
                                "version": "str"  # Optional. Display name of this
                                  sku.
                            }
                        ],
                        "targets": [
                            {
                                "acceptedContentEncodings": [
                                    "str"  # Optional. List of content encodings
                                      accepted by this target.
                                ],
                                "acceptedDataFormats": [
                                    "str"  # Optional. List of data formats
                                      accepted by this target.
                                ],
                                "description": "str",  # Optional. A description
                                  about this target.
                                "id": "str",  # Optional. Unique target id.
                                "name": "str"  # Optional. Display name of this
                                  target.
                            }
                        ]
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_offerings_list_request(
                    location_name=location_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)


class Operations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.quantum.aio.AzureQuantumManagementClient`'s
        :attr:`operations` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, **kwargs: Any) -> AsyncIterable[JSON]:
        """Returns list of operations.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "display": {
                        "description": "str",  # Optional. Description of the operation.
                        "operation": "str",  # Optional. Operation name.
                        "provider": "str",  # Optional. Provider name.
                        "resource": "str"  # Optional. Resource name.
                    },
                    "isDataAction": bool,  # Optional. Indicates whether the operation is a data
                      action.
                    "name": "str"  # Optional. Name of the operation.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_operations_list_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)


class WorkspaceOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.quantum.aio.AzureQuantumManagementClient`'s
        :attr:`workspace` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def check_name_availability(
        self,
        location_name: str,
        check_name_availability_parameters: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Check the availability of the resource name.

        :param location_name: Location. Required.
        :type location_name: str
        :param check_name_availability_parameters: The name and type of the resource. Required.
        :type check_name_availability_parameters: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                check_name_availability_parameters = {
                    "name": "str",  # Optional. Name for checking availability.
                    "type": "Microsoft.Quantum/Workspaces"  # Optional. Default value is
                      "Microsoft.Quantum/Workspaces". The resource type of Quantum Workspace.
                }

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. The detailed info regarding the reason
                      associated with the Namespace.
                    "nameAvailable": bool,  # Optional. Indicator of availability of the Quantum
                      Workspace resource name.
                    "reason": "str"  # Optional. The reason of unavailability.
                }
        """

    @overload
    async def check_name_availability(
        self,
        location_name: str,
        check_name_availability_parameters: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Check the availability of the resource name.

        :param location_name: Location. Required.
        :type location_name: str
        :param check_name_availability_parameters: The name and type of the resource. Required.
        :type check_name_availability_parameters: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. The detailed info regarding the reason
                      associated with the Namespace.
                    "nameAvailable": bool,  # Optional. Indicator of availability of the Quantum
                      Workspace resource name.
                    "reason": "str"  # Optional. The reason of unavailability.
                }
        """

    @distributed_trace_async
    async def check_name_availability(
        self, location_name: str, check_name_availability_parameters: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Check the availability of the resource name.

        :param location_name: Location. Required.
        :type location_name: str
        :param check_name_availability_parameters: The name and type of the resource. Is either a JSON
         type or a IO[bytes] type. Required.
        :type check_name_availability_parameters: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                check_name_availability_parameters = {
                    "name": "str",  # Optional. Name for checking availability.
                    "type": "Microsoft.Quantum/Workspaces"  # Optional. Default value is
                      "Microsoft.Quantum/Workspaces". The resource type of Quantum Workspace.
                }

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. The detailed info regarding the reason
                      associated with the Namespace.
                    "nameAvailable": bool,  # Optional. Indicator of availability of the Quantum
                      Workspace resource name.
                    "reason": "str"  # Optional. The reason of unavailability.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(check_name_availability_parameters, (IOBase, bytes)):
            _content = check_name_availability_parameters
        else:
            _json = check_name_availability_parameters

        _request = build_workspace_check_name_availability_request(
            location_name=location_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace_async
    async def list_keys(self, resource_group_name: str, workspace_name: str, **kwargs: Any) -> JSON:
        """Get the keys to use with the Quantum APIs. A key is used to authenticate and authorize access
        to the Quantum REST APIs. Only one key is needed at a time; two are given to provide seamless
        key regeneration.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the quantum workspace resource. Required.
        :type workspace_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "apiKeyEnabled": bool,  # Optional. Indicator of enablement of the Quantum
                      workspace Api keys.
                    "primaryConnectionString": "str",  # Optional. The connection string of the
                      primary api key.
                    "primaryKey": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The creation time of
                          the api key.
                        "key": "str"  # Optional. The Api key.
                    },
                    "secondaryConnectionString": "str",  # Optional. The connection string of the
                      secondary api key.
                    "secondaryKey": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The creation time of
                          the api key.
                        "key": "str"  # Optional. The Api key.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_workspace_list_keys_request(
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def regenerate_keys(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        workspace_name: str,
        key_specification: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Regenerate either the primary or secondary key for use with the Quantum APIs. The old key will
        stop working immediately.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the quantum workspace resource. Required.
        :type workspace_name: str
        :param key_specification: Which key to regenerate:  primary or secondary. Required.
        :type key_specification: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                key_specification = {
                    "keys": [
                        "str"  # Optional. A list of api key names.
                    ]
                }
        """

    @overload
    async def regenerate_keys(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        workspace_name: str,
        key_specification: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Regenerate either the primary or secondary key for use with the Quantum APIs. The old key will
        stop working immediately.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the quantum workspace resource. Required.
        :type workspace_name: str
        :param key_specification: Which key to regenerate:  primary or secondary. Required.
        :type key_specification: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def regenerate_keys(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, workspace_name: str, key_specification: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> None:
        """Regenerate either the primary or secondary key for use with the Quantum APIs. The old key will
        stop working immediately.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the quantum workspace resource. Required.
        :type workspace_name: str
        :param key_specification: Which key to regenerate:  primary or secondary. Is either a JSON type
         or a IO[bytes] type. Required.
        :type key_specification: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                key_specification = {
                    "keys": [
                        "str"  # Optional. A list of api key names.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(key_specification, (IOBase, bytes)):
            _content = key_specification
        else:
            _json = key_specification

        _request = build_workspace_regenerate_keys_request(
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore
